/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AssetCircleRight {
    }
    interface AssetLine {
    }
    interface AssetMaximize {
    }
    interface AssetRectangleLeft {
    }
    interface AssetRectangleMiddle {
    }
    interface AssetRectangleRight {
    }
    interface AssetRectangleTop {
    }
    interface AssetReputexLogo {
    }
    interface PendingState {
        "bodyMessage": string;
        "mode": boolean;
    }
    interface ReputexDidWidget {
        "apiAccessKey": string;
        "apiSecretKey": string;
        "mode": boolean;
        "userDid": string;
        "visibility": boolean;
    }
    interface ReputexWidget {
        "apiAccessKey": string;
        "apiSecretKey": string;
        "mode": boolean;
        "userAddress": string;
        "visibility": boolean;
    }
    interface ScoreLoaded {
        "isDid": boolean;
        "lastUpdated": string;
        "mode": boolean;
        "reputeXScore": number;
        "userAddress": string;
    }
}
declare global {
    interface HTMLAssetCircleRightElement extends Components.AssetCircleRight, HTMLStencilElement {
    }
    var HTMLAssetCircleRightElement: {
        prototype: HTMLAssetCircleRightElement;
        new (): HTMLAssetCircleRightElement;
    };
    interface HTMLAssetLineElement extends Components.AssetLine, HTMLStencilElement {
    }
    var HTMLAssetLineElement: {
        prototype: HTMLAssetLineElement;
        new (): HTMLAssetLineElement;
    };
    interface HTMLAssetMaximizeElement extends Components.AssetMaximize, HTMLStencilElement {
    }
    var HTMLAssetMaximizeElement: {
        prototype: HTMLAssetMaximizeElement;
        new (): HTMLAssetMaximizeElement;
    };
    interface HTMLAssetRectangleLeftElement extends Components.AssetRectangleLeft, HTMLStencilElement {
    }
    var HTMLAssetRectangleLeftElement: {
        prototype: HTMLAssetRectangleLeftElement;
        new (): HTMLAssetRectangleLeftElement;
    };
    interface HTMLAssetRectangleMiddleElement extends Components.AssetRectangleMiddle, HTMLStencilElement {
    }
    var HTMLAssetRectangleMiddleElement: {
        prototype: HTMLAssetRectangleMiddleElement;
        new (): HTMLAssetRectangleMiddleElement;
    };
    interface HTMLAssetRectangleRightElement extends Components.AssetRectangleRight, HTMLStencilElement {
    }
    var HTMLAssetRectangleRightElement: {
        prototype: HTMLAssetRectangleRightElement;
        new (): HTMLAssetRectangleRightElement;
    };
    interface HTMLAssetRectangleTopElement extends Components.AssetRectangleTop, HTMLStencilElement {
    }
    var HTMLAssetRectangleTopElement: {
        prototype: HTMLAssetRectangleTopElement;
        new (): HTMLAssetRectangleTopElement;
    };
    interface HTMLAssetReputexLogoElement extends Components.AssetReputexLogo, HTMLStencilElement {
    }
    var HTMLAssetReputexLogoElement: {
        prototype: HTMLAssetReputexLogoElement;
        new (): HTMLAssetReputexLogoElement;
    };
    interface HTMLPendingStateElement extends Components.PendingState, HTMLStencilElement {
    }
    var HTMLPendingStateElement: {
        prototype: HTMLPendingStateElement;
        new (): HTMLPendingStateElement;
    };
    interface HTMLReputexDidWidgetElement extends Components.ReputexDidWidget, HTMLStencilElement {
    }
    var HTMLReputexDidWidgetElement: {
        prototype: HTMLReputexDidWidgetElement;
        new (): HTMLReputexDidWidgetElement;
    };
    interface HTMLReputexWidgetElement extends Components.ReputexWidget, HTMLStencilElement {
    }
    var HTMLReputexWidgetElement: {
        prototype: HTMLReputexWidgetElement;
        new (): HTMLReputexWidgetElement;
    };
    interface HTMLScoreLoadedElement extends Components.ScoreLoaded, HTMLStencilElement {
    }
    var HTMLScoreLoadedElement: {
        prototype: HTMLScoreLoadedElement;
        new (): HTMLScoreLoadedElement;
    };
    interface HTMLElementTagNameMap {
        "asset-circle-right": HTMLAssetCircleRightElement;
        "asset-line": HTMLAssetLineElement;
        "asset-maximize": HTMLAssetMaximizeElement;
        "asset-rectangle-left": HTMLAssetRectangleLeftElement;
        "asset-rectangle-middle": HTMLAssetRectangleMiddleElement;
        "asset-rectangle-right": HTMLAssetRectangleRightElement;
        "asset-rectangle-top": HTMLAssetRectangleTopElement;
        "asset-reputex-logo": HTMLAssetReputexLogoElement;
        "pending-state": HTMLPendingStateElement;
        "reputex-did-widget": HTMLReputexDidWidgetElement;
        "reputex-widget": HTMLReputexWidgetElement;
        "score-loaded": HTMLScoreLoadedElement;
    }
}
declare namespace LocalJSX {
    interface AssetCircleRight {
    }
    interface AssetLine {
    }
    interface AssetMaximize {
    }
    interface AssetRectangleLeft {
    }
    interface AssetRectangleMiddle {
    }
    interface AssetRectangleRight {
    }
    interface AssetRectangleTop {
    }
    interface AssetReputexLogo {
    }
    interface PendingState {
        "bodyMessage"?: string;
        "mode"?: boolean;
    }
    interface ReputexDidWidget {
        "apiAccessKey"?: string;
        "apiSecretKey"?: string;
        "mode"?: boolean;
        "userDid"?: string;
        "visibility"?: boolean;
    }
    interface ReputexWidget {
        "apiAccessKey"?: string;
        "apiSecretKey"?: string;
        "mode"?: boolean;
        "userAddress"?: string;
        "visibility"?: boolean;
    }
    interface ScoreLoaded {
        "isDid"?: boolean;
        "lastUpdated"?: string;
        "mode"?: boolean;
        "reputeXScore"?: number;
        "userAddress"?: string;
    }
    interface IntrinsicElements {
        "asset-circle-right": AssetCircleRight;
        "asset-line": AssetLine;
        "asset-maximize": AssetMaximize;
        "asset-rectangle-left": AssetRectangleLeft;
        "asset-rectangle-middle": AssetRectangleMiddle;
        "asset-rectangle-right": AssetRectangleRight;
        "asset-rectangle-top": AssetRectangleTop;
        "asset-reputex-logo": AssetReputexLogo;
        "pending-state": PendingState;
        "reputex-did-widget": ReputexDidWidget;
        "reputex-widget": ReputexWidget;
        "score-loaded": ScoreLoaded;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "asset-circle-right": LocalJSX.AssetCircleRight & JSXBase.HTMLAttributes<HTMLAssetCircleRightElement>;
            "asset-line": LocalJSX.AssetLine & JSXBase.HTMLAttributes<HTMLAssetLineElement>;
            "asset-maximize": LocalJSX.AssetMaximize & JSXBase.HTMLAttributes<HTMLAssetMaximizeElement>;
            "asset-rectangle-left": LocalJSX.AssetRectangleLeft & JSXBase.HTMLAttributes<HTMLAssetRectangleLeftElement>;
            "asset-rectangle-middle": LocalJSX.AssetRectangleMiddle & JSXBase.HTMLAttributes<HTMLAssetRectangleMiddleElement>;
            "asset-rectangle-right": LocalJSX.AssetRectangleRight & JSXBase.HTMLAttributes<HTMLAssetRectangleRightElement>;
            "asset-rectangle-top": LocalJSX.AssetRectangleTop & JSXBase.HTMLAttributes<HTMLAssetRectangleTopElement>;
            "asset-reputex-logo": LocalJSX.AssetReputexLogo & JSXBase.HTMLAttributes<HTMLAssetReputexLogoElement>;
            "pending-state": LocalJSX.PendingState & JSXBase.HTMLAttributes<HTMLPendingStateElement>;
            "reputex-did-widget": LocalJSX.ReputexDidWidget & JSXBase.HTMLAttributes<HTMLReputexDidWidgetElement>;
            "reputex-widget": LocalJSX.ReputexWidget & JSXBase.HTMLAttributes<HTMLReputexWidgetElement>;
            "score-loaded": LocalJSX.ScoreLoaded & JSXBase.HTMLAttributes<HTMLScoreLoadedElement>;
        }
    }
}
